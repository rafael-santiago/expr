#
#                                Copyright (C) 2017 by Rafael Santiago
#
# This is a free software. You can redistribute it and/or modify under
# the terms of the GNU General Public License version 2.
#
#

include ../Toolset.hsl

local var src type list;
local var inc type list;
local var cflags type list;
local var lib type list;
local var ldflags type list;

local var appname type string;
local var toolset_name type string;

project expr-tests : toolset $toolset_name : $src, $inc, $cflags, $lib, $ldflags, $appname;

expr-tests.preloading() {
    $toolset_name = get_toolset();
}

expr-tests.prologue() {
    $src.ls(".*\\.c$");
    $inc = hefesto.sys.get_option("includes");
    $cflags = hefesto.sys.get_option("cflags");
    $lib = hefesto.sys.get_option("libraries");
    $ldflags = hefesto.sys.get_option("ldflags");
    $appname = "expr-tests";

    if (hefesto.sys.os_name() == "windows") {
        $appname = $appname + ".exe";
    }

    $ldflags.add_item("-lcutest");

    forge_cutest();

    $ldflags = get_main_project_objs($ldflags);

    var current_os type string;

    $current_os = hefesto.sys.os_name();

    if ($current_os == "linux") {
        $ldflags.add_item("-ldl");
        $ldflags.add_item("-lpthread");
    } else if ($current_os == "freebsd" || $current_os == "netbsd" || $current_os == "openbsd") {
        $ldflags.add_item("-lexecinfo");
        $ldflags.add_item("-lpthread");
    } else if ($current_os == "minix") {
        $ldflags.add_item("-lexecinfo");
    } else if ($current_os == "sunos") {
        $ldflags.add_item("-lpthread");
        $cflags.add_item("-DNO_CUTEST_BACKTRACING");
    }
}

expr-tests.epilogue() {
    if (hefesto.sys.last_forge_result() == 0) {
        var execline type string;
        $execline = hefesto.sys.make_path("bin", $appname) + " --cutest-leak-check=yes " + hefesto.project.cmdline();
        if (hefesto.sys.run($execline) != 0) {
            hefesto.project.abort(1);
        }
    }
}

local function get_main_project_objs(objs type list) : result type list {
    var oldcwd type string;

    $oldcwd = hefesto.sys.pwd();

    if (hefesto.sys.cd("../o") == 0) {
        hefesto.sys.echo("BUILD ERROR: Unable to get main objects.\n");
        hefesto.project.abort(1);
    }

    $objs.ls(".*\\.o$");

    var o type int;

    $o = 0;
    while ($o < $objs.count()) {
        var objpath type string;

        $objpath = $objs.item($o);

        if ($objpath.match(".*main\\.o$") == 1) {
            $objs.del_index($o);
            break;
        }

        $o = $o + 1;
    }

    hefesto.sys.cd($oldcwd);

    result $objs;
}

local function forge_cutest() : result type none {
    var oldcwd type string;

    $oldcwd = hefesto.sys.pwd();

    if (hefesto.sys.cd("cutest/src") == 0) {
        hefesto.sys.echo("BUILD ERROR: Unable to find the sub-directory cutest/src.\n");
        hefesto.project.abort(1);
    }


    hefesto.sys.forge("cutest", "Forgefile.hsl", "--obj-output-dir=obj --bin-output-dir=lib");

    if (hefesto.sys.last_forge_result() != 0) {
        hefesto.project.abort(1);
    }

    hefesto.sys.cd($oldcwd);
}
